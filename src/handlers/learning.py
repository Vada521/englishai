from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import States, DATABASE_PATH
from src.ai.assistant import assistant
from src.utils.keyboards import get_main_menu_keyboard, get_learning_keyboard
from src.utils.database import get_database
import sqlite3
from datetime import datetime
import logging
import json
import asyncio
from src.database.models import save_learning_plan, get_current_topic, mark_topic_completed, update_user_level, get_learning_plan
from telegram.error import BadRequest

logger = logging.getLogger(__name__)

async def generate_learning_program(update: Update, context: ContextTypes.DEFAULT_TYPE, level: str) -> int:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º thread_id
        thread_id = context.user_data.get('thread_id')
        if not thread_id:
            thread_id = await assistant.create_thread()
            context.user_data['thread_id'] = thread_id
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è
        program = await assistant.generate_learning_program(thread_id, level)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –ë–î
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE users 
            SET current_module = 'module_1',
                last_lesson_date = ?
            WHERE user_id = ?
        ''', (datetime.now().strftime('%Y-%m-%d %H:%M:%S'), user_id))
        conn.commit()
        conn.close()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data='start_module_1')],
            [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –º–æ–¥—É–ª—å", callback_data='select_module')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è
        await update.effective_message.reply_text(
            f"üéì –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è (–£—Ä–æ–≤–µ–Ω—å {level}):\n\n"
            f"{program}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return States.LEARNING
        
    except Exception as e:
        logger.error(f"Error generating learning program: {e}")
        await update.effective_message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard(False)
        )
        return States.START

async def start_learning(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    loading_message = await query.edit_message_text(
        "‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è..."
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è
        plan = get_learning_plan(update.effective_user.id)
        if not plan:
            await query.edit_message_text(
                "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data='start_test'),
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')
                ]])
            )
            return States.START

        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Ç–µ–º—É
        current_topic = next((topic for topic in plan['topics'] if not topic.get('completed', False)), None)
        
        if not current_topic:
            await query.edit_message_text(
                "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —Ç–µ–º—ã –≤ —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ –æ–±—É—á–µ–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ –Ω–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data='start_test'),
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')
                ]])
            )
            return States.START

        # –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Ç–æ—á–∫–∞–º–∏
        loading_texts = [
            "‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è",
            "üìö –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç—å",
            "‚úçÔ∏è –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è",
            "üéØ –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã",
            "üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
        ]
        
        for i, text in enumerate(loading_texts):
            dots = "." * (i % 4)
            await loading_message.edit_text(f"{text}{dots}")
            await asyncio.sleep(0.5)

        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ç–µ–º—ã —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä assistant
        lesson = await assistant.start_learning_topic(
            context.user_data.get('thread_id', ''),
            current_topic
        )

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        text = f"üìö –¢–µ–º–∞: {current_topic['name']}\n\n"
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {current_topic['description']}\n\n"
        text += "üéØ –¶–µ–ª–∏:\n"
        for obj in current_topic['objectives']:
            text += f"‚Ä¢ {obj}\n"
        text += "\nüìñ –¢–µ–æ—Ä–∏—è:\n"
        text += lesson['theory'][:2000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–æ—Ä–∏–∏

        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", callback_data='start_exercises')],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω—É", callback_data='show_learning_plan')]
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['current_lesson'] = lesson
        return States.LEARNING

    except BadRequest as e:
        if "Message is too long" in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_learning: Message_too_long")
            await query.edit_message_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')
                ]])
            )
        return States.START
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_learning: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')
            ]])
        )
        return States.START

async def start_module(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –º–æ–¥—É–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    await query.edit_message_text(
        "–ú–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        reply_markup=get_main_menu_keyboard()
    )

async def handle_lesson_completion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        user_id = update.effective_user.id
        db = get_database()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
        db.execute("""
            UPDATE learning_path 
            SET completed = TRUE, completion_date = ? 
            WHERE user_id = ? AND completed = FALSE 
            ORDER BY lesson_order 
            LIMIT 1
        """, (datetime.now().isoformat(), user_id))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.execute("""
            UPDATE users 
            SET lessons_completed = lessons_completed + 1,
                last_lesson_date = ?
            WHERE user_id = ?
        """, (datetime.now().isoformat(), user_id))
        
        await query.edit_message_text(
            "–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ?",
            reply_markup=get_learning_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error completing lesson: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )

async def generate_learning_plan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    try:
        logger.info(f"Starting generate_learning_plan for user {update.effective_user.id}")
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await query.edit_message_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        test_results = context.user_data.get('test_results')
        logger.info(f"Retrieved test results from context: {test_results}")
        
        if not test_results:
            logger.error("No test results found in context")
            raise Exception("No test results available")
        
        # –°–µ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress_messages = [
            "üìö –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —É—Ä–æ–≤–µ–Ω—å...",
            "üéØ –ü–æ–¥–±–∏—Ä–∞—é –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã...",
            "üìã –°–æ—Å—Ç–∞–≤–ª—è—é –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è...",
            "‚ö°Ô∏è –§–æ—Ä–º–∏—Ä—É—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è...",
            "‚ú® –§–∏–Ω–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∏—Ö–∏..."
        ]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        for msg in progress_messages:
            await asyncio.sleep(1.5)
            await message.edit_text(msg)
            logger.debug(f"Displayed progress message: {msg}")
        
        # –ü–æ–ª—É—á–∞–µ–º thread_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        thread_id = context.user_data.get('thread_id')
        logger.info(f"Retrieved thread_id from context: {thread_id}")
        
        if not thread_id:
            logger.info("Creating new thread")
            thread_id = await assistant.create_thread()
            context.user_data['thread_id'] = thread_id
            logger.info(f"Created new thread with ID: {thread_id}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è
        level = test_results.get('level', 'A1')
        strengths = test_results.get('strengths', '')
        weaknesses = test_results.get('weaknesses', '')
        
        logger.info(f"Generating learning plan with params: level={level}, strengths={strengths}, weaknesses={weaknesses}")
        
        learning_plan = await assistant.generate_learning_plan(
            thread_id=thread_id,
            level=level,
            strengths=strengths,
            weaknesses=weaknesses
        )
        
        logger.info(f"Received learning plan: {learning_plan}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if save_learning_plan(update.effective_user.id, learning_plan):
            logger.info("Successfully saved learning plan to database")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            plan_text = format_learning_plan(learning_plan)
            logger.debug(f"Formatted plan text: {plan_text}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data='start_learning')],
                [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
            ]
            
            await message.edit_text(
                plan_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            logger.info("Successfully displayed learning plan")
            
            return States.START
        else:
            logger.error("Failed to save learning plan to database")
            raise Exception("Failed to save learning plan")
        
    except Exception as e:
        logger.error(f"Error in generate_learning_plan: {e}", exc_info=True)
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            ]])
        )
        return States.START

async def format_learning_plan(plan: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    text = "üìã –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è:\n\n"
    text += f"üìä –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {plan['current_level']}\n"
    text += f"üéØ –¶–µ–ª—å: {plan['target_level']}\n\n"
    text += "üìö –¢–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n"
    
    for i, topic in enumerate(plan['topics'], 1):
        text += f"\n{i}. {topic['name']}\n"
        text += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {topic['duration']}\n"
        text += f"üéØ –¶–µ–ª–∏:\n"
        for objective in topic['objectives']:
            text += f"‚Ä¢ {objective}\n"
    
    return text

async def handle_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
        topic = context.user_data.get('current_topic')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ –¥–ª—è —É—Ä–æ–∫–∞
        thread_id = await assistant.create_thread()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞
        lesson_content = await assistant.generate_lesson_content(thread_id, topic)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['lesson_content'] = lesson_content
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫—É
        keyboard = [
            [
                InlineKeyboardButton("üìñ –¢–µ–æ—Ä–∏—è", callback_data="show_theory"),
                InlineKeyboardButton("‚úçÔ∏è –ü—Ä–∞–∫—Ç–∏–∫–∞", callback_data="show_practice")
            ],
            [
                InlineKeyboardButton("üéØ –¢–µ—Å—Ç", callback_data="show_test"),
                InlineKeyboardButton("üìù –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="show_homework")
            ],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="back_to_topics")]
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∑–æ—Ä —É—Ä–æ–∫–∞
        theory = lesson_content['theory']
        key_points = '\n'.join(f"‚Ä¢ {point}" for point in theory['key_points'])
        
        message = (
            f"üìö *{topic['name']}*\n\n"
            f"{theory['explanation']}\n\n"
            f"*–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:*\n"
            f"{key_points}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:"
        )
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return States.LEARNING_LESSON
        
    except Exception as e:
        logger.error(f"Error in handle_lesson: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        return States.START 