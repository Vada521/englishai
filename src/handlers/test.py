from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import States, DATABASE_PATH
from src.ai.assistant import assistant
from src.utils.keyboards import get_test_answer_keyboard, get_main_menu_keyboard
from src.utils.database import get_database
from src.utils.learning import determine_level, generate_learning_path
import sqlite3
from datetime import datetime
import logging
import asyncio
import json
from telegram.ext import ConversationHandler
from src.handlers.learning_plan import generate_learning_plan

logger = logging.getLogger(__name__)

async def start_level_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        logger.debug(f"–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await query.edit_message_text("ü§î –§–æ—Ä–º–∏—Ä—É—é —Ç–µ—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è...")
        
        # –°–µ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress_messages = [
            "üìù –ü–æ–¥–±–∏—Ä–∞—é –≤–æ–ø—Ä–æ—Å—ã...",
            "üéØ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å...",
            "‚ö°Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤...",
            "üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞..."
        ]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ –¥–ª—è —Ç–µ—Å—Ç–∞
        thread_id = await assistant.create_thread()
        context.user_data['thread_id'] = thread_id
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        for msg in progress_messages:
            await asyncio.sleep(1.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await message.edit_text(msg)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
        questions = await assistant.generate_test_questions(thread_id)
        logger.debug(f"Generated questions: {questions}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥
        
        if not questions or not isinstance(questions, list):
            logger.error(f"Invalid questions format: {questions}")
            await message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return States.START
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        first_question = questions[0]
        if not isinstance(first_question, dict) or 'options' not in first_question:
            logger.error(f"Invalid first question format: {first_question}")
            await message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return States.START
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['questions'] = questions
        context.user_data['current_question'] = 0
        context.user_data['correct_answers'] = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        current_question = questions[0]
        options = {
            'a': current_question['options'][0],
            'b': current_question['options'][1],
            'c': current_question['options'][2]
        }
        
        await message.edit_text(
            f"–í–æ–ø—Ä–æ—Å 1 –∏–∑ 10:\n\n{current_question['question']}",
            reply_markup=get_test_answer_keyboard(options)
        )
        
        return States.TEST_IN_PROGRESS
        
    except Exception as e:
        logger.error(f"Error starting test: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        return States.START

async def handle_test_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        answer = query.data.replace('test_', '')
        current_q = context.user_data.get('current_question', 0)
        questions = context.user_data.get('questions', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
        if not questions:
            logger.error("No questions found in context")
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_main_menu_keyboard()
            )
            return States.START
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        if current_q >= len(questions):
            logger.error(f"Current question index {current_q} is out of range")
            return await process_test_results(update, context)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        current_question = questions[current_q]
        logger.debug(f"Current question: {current_question}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–ø—Ä–æ—Å–∞
        if not isinstance(current_question, dict) or 'options' not in current_question:
            logger.error(f"Invalid question format: {current_question}")
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_main_menu_keyboard()
            )
            return States.START
            
        options = current_question['options']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_answer = options[ord(answer) - ord('a')]
        except (IndexError, TypeError) as e:
            logger.error(f"Error getting user answer: {e}, answer: {answer}, options: {options}")
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_main_menu_keyboard()
            )
            return States.START
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ
        answer_info = {
            'question': current_question['question'],
            'user_answer': user_answer,
            'options': options
        }
        
        if 'user_answers' not in context.user_data:
            context.user_data['user_answers'] = []
        context.user_data['user_answers'].append(answer_info)
        
        logger.info(f"User {query.from_user.id} answered question {current_q + 1}. Answer: {user_answer}")
        
        current_q += 1
        context.user_data['current_question'] = current_q
        
        if current_q < len(questions):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            question = questions[current_q]
            if not isinstance(question, dict) or 'options' not in question:
                logger.error(f"Invalid next question format: {question}")
                await query.edit_message_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –≤–æ–ø—Ä–æ—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=get_main_menu_keyboard()
                )
                return States.START
            
            next_options = question['options']
            if not isinstance(next_options, (list, tuple)) or len(next_options) < 3:
                logger.error(f"Invalid options for next question: {next_options}")
                await query.edit_message_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=get_main_menu_keyboard()
                )
                return States.START
            
            options = {
                'a': next_options[0],
                'b': next_options[1],
                'c': next_options[2]
            }
            
            await query.edit_message_text(
                f"–í–æ–ø—Ä–æ—Å {current_q + 1} –∏–∑ {len(questions)}:\n\n{question['question']}",
                reply_markup=get_test_answer_keyboard(options)
            )
            return States.TEST_IN_PROGRESS
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            await query.edit_message_text(
                "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è—é —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º...\n\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )
            return await process_test_results(update, context)
            
    except Exception as e:
        logger.error(f"Error handling test answer: {e}", exc_info=True)
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_menu_keyboard()
        )
        return States.START

async def process_test_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"""
    query = update.callback_query
    user_id = query.from_user.id
    
    logger.info(f"Processing test results for user {user_id}")
    
    try:
        if query.data == 'get_learning_program':
            logger.info("User clicked get_learning_program button")
            return await generate_learning_plan(update, context)
            
        user_answers = context.user_data.get('user_answers', [])
        thread_id = context.user_data.get('thread_id')
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç AI
        result = await assistant.explain_level(thread_id, user_answers)
        logger.info(f"Received AI analysis: {result}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("üìö –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è", callback_data='get_learning_program')],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ", callback_data='start_test')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        
        await query.edit_message_text(
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:\n\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {result['correct_answers']} –∏–∑ 10\n"
            f"üéØ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {result['level']}\n\n"
            f"üìù {result['explanation']}\n\n"
            f"üí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:\n{result['strengths']}\n\n"
            f"‚ùóÔ∏è –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:\n{result['weaknesses']}\n\n"
            f"üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{result['recommendations']}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['test_results'] = {
            'level': result['level'],
            'strengths': result['strengths'],
            'weaknesses': result['weaknesses']
        }
        
        return States.START
        
    except Exception as e:
        logger.error(f"Error processing test results: {e}", exc_info=True)
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ", callback_data='start_test'),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
            ]])
        )
        return States.START

def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="start_learning")],
        [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ", callback_data="start_test")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await query.edit_message_text("ü§î –§–æ—Ä–º–∏—Ä—É—é —Ç–µ—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è...")
        
        # –°–µ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress_messages = [
            "üìù –ü–æ–¥–±–∏—Ä–∞—é –≤–æ–ø—Ä–æ—Å—ã...",
            "üéØ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å...",
            "‚ö°Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤...",
            "üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞..."
        ]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        for msg in progress_messages:
            await asyncio.sleep(1.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await message.edit_text(msg)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ –¥–ª—è —Ç–µ—Å—Ç–∞
        thread_id = await assistant.create_thread()
        context.user_data['thread_id'] = thread_id
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
        questions = await assistant.generate_test_questions(thread_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['questions'] = questions
        context.user_data['current_question'] = 0
        context.user_data['correct_answers'] = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        current_question = questions[0]
        options = {
            'a': current_question['options'][0],
            'b': current_question['options'][1],
            'c': current_question['options'][2]
        }
        
        await message.edit_text(
            f"–í–æ–ø—Ä–æ—Å 1 –∏–∑ 10:\n\n{current_question['question']}",
            reply_markup=get_test_answer_keyboard(options)
        )
        
        return States.TEST_IN_PROGRESS
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_test: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            ]])
        )
        return States.START 