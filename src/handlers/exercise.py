from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import States, DATABASE_PATH
import sqlite3
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

async def handle_exercise(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–º—ã –∏ –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ callback_data
        _, topic_id, exercise_num = query.data.split('_')
        topic_id = int(topic_id)
        exercise_num = int(exercise_num)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        current_topic = context.user_data.get('current_topic')
        exercises = context.user_data.get('current_exercises', [])
        
        if not current_topic or not exercises:
            await query.edit_message_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')
                ]])
            )
            return States.START
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
        current_exercise = next(
            (ex for ex in exercises if ex['topic_id'] == topic_id), 
            None
        )
        
        if not current_exercise:
            await query.edit_message_text(
                "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')
                ]])
            )
            return States.START
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ–º
        message = (
            f"üìö –ú–æ–¥—É–ª—å: {current_topic['name']}\n"
            f"‚úçÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {exercise_num}: {current_exercise['name']}\n\n"
            f"üìù {current_exercise['description']}\n\n"
            f"–¢–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {current_exercise['type']}"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if exercise_num > 1:
            nav_buttons.append(
                InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ", callback_data=f'exercise_{topic_id}_{exercise_num-1}')
            )
        if exercise_num < len(exercises):
            nav_buttons.append(
                InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data=f'exercise_{topic_id}_{exercise_num+1}')
            )
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data=f'complete_exercise_{topic_id}_{exercise_num}')
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard.append([
            InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')
        ])
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return States.EXERCISE
        
    except Exception as e:
        logger.error(f"Error handling exercise: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            ]])
        )
        return States.START 