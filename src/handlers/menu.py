from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import States
from src.database.db import get_database
import logging

logger = logging.getLogger(__name__)

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    if query:
        await query.answer()
    
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç
    conn = get_database()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT test_score, has_completed_test 
        FROM users 
        WHERE user_id = ?
    """, (user_id,))
    result = cursor.fetchone()
    conn.close()
    
    has_completed_test = result['has_completed_test'] if result else False
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Å—Ç–∞
    keyboard = []
    if not has_completed_test:
        keyboard = [
            [InlineKeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data='start_test')]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("üìö –ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è", callback_data='show_learning_plan')],
            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')]
        ]
    
    text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    if query:
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    return States.START

async def show_learning_plan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    try:
        user_id = update.effective_user.id
        conn = get_database()
        cursor = conn.cursor()
        cursor.execute("SELECT learning_plan FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        if not result or not result[0]:
            await query.edit_message_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è. –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data='start_test'),
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')
                ]])
            )
            return States.START
        
        plan = result[0]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        text = f"üìã –í–∞—à –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è:\n\n"
        text += f"üìä –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {plan['current_level']}\n"
        text += f"üéØ –¶–µ–ª—å: {plan['target_level']}\n\n"
        text += "üìö –¢–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n"
        
        for i, topic in enumerate(plan['topics'], 1):
            completed = "‚úÖ" if topic.get('completed', False) else "‚è≥"
            text += f"\n{completed} {i}. {topic['name']}\n"
            text += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {topic['duration']}\n"
        
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data='start_learning')],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ", callback_data='start_test')],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]
        ]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return States.START
        
    except Exception as e:
        logger.error(f"Error showing learning plan: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')
            ]])
        )
        return States.START 