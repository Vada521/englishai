from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import States
from src.ai.assistant import assistant
import logging
import asyncio
from src.database.models import save_learning_plan

logger = logging.getLogger(__name__)

async def generate_learning_plan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    try:
        logger.info(f"Starting generate_learning_plan for user {update.effective_user.id}")
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await query.edit_message_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        test_results = context.user_data.get('test_results')
        logger.info(f"Retrieved test results from context: {test_results}")
        
        if not test_results:
            logger.error("No test results found in context")
            raise Exception("No test results available")
        
        # –°–µ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress_messages = [
            "üìö –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —É—Ä–æ–≤–µ–Ω—å...",
            "üéØ –ü–æ–¥–±–∏—Ä–∞—é –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã...",
            "üìã –°–æ—Å—Ç–∞–≤–ª—è—é –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è...",
            "‚ö°Ô∏è –§–æ—Ä–º–∏—Ä—É—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è...",
            "‚ú® –§–∏–Ω–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∏—Ö–∏..."
        ]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        for msg in progress_messages:
            await asyncio.sleep(1.5)
            await message.edit_text(msg)
            logger.debug(f"Displayed progress message: {msg}")
        
        # –ü–æ–ª—É—á–∞–µ–º thread_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        thread_id = context.user_data.get('thread_id')
        logger.info(f"Retrieved thread_id from context: {thread_id}")
        
        if not thread_id:
            logger.info("Creating new thread")
            thread_id = await assistant.create_thread()
            context.user_data['thread_id'] = thread_id
            logger.info(f"Created new thread with ID: {thread_id}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è
        level = test_results.get('level', 'A1')
        strengths = test_results.get('strengths', '')
        weaknesses = test_results.get('weaknesses', '')
        
        logger.info(f"Generating learning plan with params: level={level}, strengths={strengths}, weaknesses={weaknesses}")
        
        learning_plan = await assistant.generate_learning_plan(
            thread_id=thread_id,
            level=level,
            strengths=strengths,
            weaknesses=weaknesses
        )
        
        logger.info(f"Received learning plan: {learning_plan}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if save_learning_plan(update.effective_user.id, learning_plan):
            logger.info("Successfully saved learning plan to database")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            plan_text = format_learning_plan(learning_plan)
            logger.debug(f"Formatted plan text: {plan_text}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data='start_learning')],
                [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
            ]
            
            await message.edit_text(
                plan_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            logger.info("Successfully displayed learning plan")
            
            return States.START
        else:
            logger.error("Failed to save learning plan to database")
            raise Exception("Failed to save learning plan")
        
    except Exception as e:
        logger.error(f"Error in generate_learning_plan: {e}", exc_info=True)
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            ]])
        )
        return States.START

def format_learning_plan(plan: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    text = f"üìã –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è:\n\n"
    text += f"üìä –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {plan['current_level']}\n"
    text += f"üéØ –¶–µ–ª—å: {plan['target_level']}\n\n"
    text += "üìö –¢–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n"
    
    for i, topic in enumerate(plan['topics'], 1):
        text += f"\n{i}. {topic['name']}\n"
        text += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {topic['duration']}\n"
        text += f"üéØ –¶–µ–ª–∏:\n"
        for objective in topic['objectives']:
            text += f"‚Ä¢ {objective}\n"
    
    return text 