from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import States, DATABASE_PATH
from src.utils.keyboards import get_main_menu_keyboard, get_profile_keyboard
from src.utils.database import get_database
import sqlite3
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        cursor.execute('''
            SELECT username, first_name, current_level, test_score, 
                   lessons_completed, last_lesson_date, registration_date
            FROM users 
            WHERE user_id = ?
        ''', (user_id,))
        
        user_data = cursor.fetchone()
        
        if not user_data:
            await query.edit_message_text(
                "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')
                ]])
            )
            return States.START
            
        username, first_name, level, test_score, lessons_completed, last_lesson, reg_date = user_data
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
        message = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            f"üìù –ò–º—è: {first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üéØ –£—Ä–æ–≤–µ–Ω—å: {level or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n"
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {test_score or 0}/10\n"
            f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {lessons_completed or 0}\n"
            f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫: {last_lesson or '–ù–µ—Ç'}\n"
            f"üìå –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data='update_profile')],
            [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return States.PROFILE
        
    except Exception as e:
        logger.error(f"Error showing profile: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            ]])
        )
        return States.START
    finally:
        if 'conn' in locals():
            conn.close()

async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤
        cursor.execute('''
            SELECT test_date, score, level_before, level_after
            FROM test_results
            WHERE user_id = ?
            ORDER BY test_date DESC
            LIMIT 5
        ''', (user_id,))
        
        test_results = cursor.fetchall()
        
        if test_results:
            progress_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:\n\n"
            
            for date, score, level_before, level_after in test_results:
                progress_text += (
                    f"üìÖ {date}\n"
                    f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {score}/10\n"
                    f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {level_before} ‚Üí {level_after}\n\n"
                )
        else:
            progress_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        
        keyboard = [
            [InlineKeyboardButton("üë§ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        
        await query.message.edit_text(
            progress_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        conn.close()
        return States.START
        
    except Exception as e:
        logger.error(f"Error showing progress: {e}")
        await query.message.edit_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard(False)
        )
        return States.START 